#
# EP11 token configuration
#
# In order to use the EP11 Token you need to specify a list of
# adapter/domain pairs installed and configured on your system using
# the APQN_ALLOWLIST or APQN_ANY keywords, see below. All other
# settings are optional.
#
# --------------------------------------------------------------------------
#
# To force that the default for CKA_SENSITIVE is CK_TRUE for
# secret keys specify the following option:
#
#      FORCE_SENSITIVE
#
# --------------------------------------------------------------------------
#
# To enable strict-mode, specify the following option:
#
#      STRICT_MODE
#
# In strict-mode all session-keys will strictly belong to the PKCS#11
# session that created it. When the PKCS#11 session ends, all session
# keys created for this session can no longer be used.
#
# --------------------------------------------------------------------------
#
# In VHSM-mode (virtual-HSM), all keys generated by the EP-11 token will
# strictly belong to the EP11 token that created it. Every EP11 token
# requires a VHSM-pin to be set using the pkcsep11_session tool.
#
#      VHSM_MODE
#
# --------------------------------------------------------------------------
#
# The list of mechanisms returned by C_GetMechanismList is filtered
# using the control point settings of the used crypto adapters.
# The EP11 CP-filter config file is used to associate certain
# control points with mechanisms that are dependent on these control
# points. The default CP-filter config file is 'ep11cpfilter.conf' located
# in the same directory as this EP11 token configuration file.
# You can optionally specify the name and/or location of the CP-filter
# file:
#
#      CPFILTER /etc/opencryptoki/ep11cpfilter.conf
#
# --------------------------------------------------------------------------
#
# To enable optimization of single part Sign/Verify and Encrypt/Decrypt 
# operations specify the following option: 
# 
#      OPTIMIZE_SINGLE_PART_OPERATIONS
#
# --------------------------------------------------------------------------
#
# To optimize digest operations using CPACF the libica library is used.
# Use the DIGEST_LIBICA option to control which libica library is loaded.
# Specify the path of the libica library to use a specific libica library,
# or specify 'DEFAULT' to use the system default libica library.
# Specify 'OFF' to turn digest optimizations off.
#
#      DIGEST_LIBICA <libica-path> | DEFAULT | OFF
#
# --------------------------------------------------------------------------
#
# By default the random number generator of the EP11 cypto adatper is used to
# generate random data. Specify the USE_PRANDOM option to read random data from
# /dev/prandom instead (or /dev/urandom if /dev/prandom is not available).
#
#      USE_PRANDOM
#
# --------------------------------------------------------------------------
#
# To optimize encrypt/decrypt and sign/verify performance, a corresponding
# protected key can be created for AES secure keys and added to the secure key.
# This protected key is then used for certain mechanisms via CPACF, instead of
# performing the function via the EP11 coprocessor. 
# IBM specific boolean attribute CKA_IBM_PROTKEY_EXTRACTABLE must be true to
# make a key eligible for protected key support. CKA_IBM_PROTKEY_EXTRACTABLE
# and CKA_EXTRACTABLE cannot both be true. The default value of
# CKA_IBM_PROTKEY_EXTRACTABLE is false.
#
#      PKEY_MODE DISABLED | DEFAULT | ENABLE4NONEXTR
#
#        DISABLED       : Protected key support disabled. All key operations
#                         are performed via EP11 coprocessor, even if a
#                         given key object has a protected key.
#
#        DEFAULT        : If the application did not specify CKA_EXTRACTABLE
#                         or CKA_IBM_PROTKEY_EXTRACTABLE, new keys get default
#                         values for CKA_EXTRACTABLE (true) and
#                         CKA_IBM_PROTKEY_EXTRACTABLE (false).
#
#        ENABLE4NONEXTR : If the application specified CKA_EXTRACTABLE=false,
#                         but not CKA_IBM_PROTKEY_EXTRACTABLE, new keys get 
#                         CKA_IBM_PROTKEY_EXTRACTABLE=true internally.
#
# --------------------------------------------------------------------------
# 
# Specify the expected wrapping key verification pattern. When specified, all
# APQNs configured for the token must have been set up with this wrapping key
# verification pattern.
# You can use the TKE or ep11info to query the current wrapping key verification
# pattern of an APQN:
#   ep11info -m <adapter> -d <domain> -D
# You can also find the wrapping key verification pattern for EP11 APQNs
# in sysfs: 'cat /sys/bus/ap/devices/<card>.<domain>/mkvps'
#
#       EXPECTED_WKVP "<wkvp as 16 bytes hex string>"
#
# --------------------------------------------------------------------------
#
# There are 2 ways to specify the crypto adapters:
#   1) explicitly list of adapter/domain pairs
#
#      APQN_ALLOWLIST
#       8 13
#      10 13
#      END
#
#      The adapter and domain may be given in decimal,
#      octal (with leading 0) or hexadecimal (with leading 0x):
#
#      APQN_ALLOWLIST
#       8    0x0d
#       0x0a 13
#      END
#
#      Valid adapter and domain values are in the range 0...255
#
#   2) any available crypto adapters
#
#      APQN_ANY
#

APQN_ANY
